{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","props","componentDidMount","eth","getAccounts","accounts","setState","account","net","getId","networkId","deployedNetwork","DaiToken","networks","daiToken","Contract","abi","address","methods","balanceOf","state","call","daiTokenBalance","toString","deployedNetworkII","DappToken","dappToken","dappTokenBalance","deployedNetworkIII","TokenFarm","tokenFarm","stakingBalance","alert","error","stakeTokens","amount","approve","_address","send","from","unstakeTokens","issueTokens","this","className","scope","utils","fromWei","onSubmit","event","preventDefault","input","value","toWei","type","ref","placeholder","required","src","height","alt","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bee23b21.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport DaiToken from \"./contracts/DaiToken.json\";\nimport DappToken from \"./contracts/DappToken.json\";\nimport TokenFarm from \"./contracts/TokenFarm.json\";\nimport getWeb3 from \"./getWeb3\";\n\n\nclass App extends Component {\n\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n     const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      this.setState({web3,accounts, account:accounts[0]})\n      // Get the contract daiToken.\n\n      const networkId = await web3.eth.net.getId();\n\n      const deployedNetwork = DaiToken.networks[networkId];\n      const daiToken = new web3.eth.Contract(\n        DaiToken.abi, deployedNetwork.address\n      );\n      let daiTokenBalance = await daiToken.methods.balanceOf(this.state.account).call()\n      this.setState({daiToken,daiTokenBalance:daiTokenBalance.toString()})\n      //Get the contract DappToken\n\n      const deployedNetworkII = DappToken.networks[networkId];\n      const dappToken = new web3.eth.Contract(\n        DappToken.abi, deployedNetworkII.address\n      );\n      let dappTokenBalance = await dappToken.methods.balanceOf(this.state.account).call()\n      this.setState({dappToken,dappTokenBalance: dappTokenBalance.toString() })\n      \n      //get the contract TokenFarm\n        const deployedNetworkIII = TokenFarm.networks[networkId];\n        const tokenFarm = new web3.eth.Contract(\n          TokenFarm.abi, deployedNetworkIII.address,\n        );\n        this.setState({tokenFarm})\n        let stakingBalance = await tokenFarm.methods.stakingBalance(this.state.account).call()\n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({stakingBalance:stakingBalance.toString() });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  stakeTokens = async (amount) => {\n    await this.state.daiToken.methods.approve(this.state.tokenFarm._address,amount)\n    .send({from: this.state.account})\n    await this.state.tokenFarm.methods.stakeTokens(amount)\n    .send({from:this.state.account})\n\n    \n\n  }\n\n  unstakeTokens = async (amount) => {\n    await this.state.tokenFarm.methods.unstakeTokens()\n    .send({from:this.state.account});\n  }\n\n  issueTokens = async (amount) => {\n    await this.state.tokenFarm.methods.issueTokens()\n    .send({from:this.state.account});\n    \n    console.log(\"Tokens Issued!\")\n  }\n  constructor(props) {\n    super(props)\n  this.state = {\n    web3: null,\n    accounts: null,\n    account: null,\n    daiToken: null,\n    dappToken: null,\n    tokenFarm: null,\n    daiTokenBalance: '0',\n    dappTokenBalance: '0',\n    stakingBalance: '0',\n  }\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App text-center mt-5\">\n                <h1>Welcome!</h1>\n        <p>You Are: {this.state.accounts}</p>\n        <table className=\"table text-muted table-borderless\">\n          <thead>\n            <tr>\n            <th scope=\"col\">Staking Balance</th>\n            <th scope=\"col\">Reward Balance</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{this.state.web3.utils.fromWei(this.state.stakingBalance,'Ether')} mDai</td>\n              <td>{this.state.web3.utils.fromWei(this.state.dappTokenBalance, 'Ether')} DAPP</td>\n            </tr>\n          </tbody>\n        </table>\n\n\n        <div className=\"card mb-4 col-md-8 mx-auto\">\n          <div className=\"card-body\">\n          <form className=\"mb-3\" onSubmit={(event) => {\n            event.preventDefault()\n            let amount\n            amount = this.input.value.toString()\n            amount = this.state.web3.utils.toWei(amount, 'Ether')\n            this.stakeTokens(amount)\n          }\n\n          }>\n              <div>\n                <label className=\"float-left\"><b>Stake Tokens</b></label>\n                <span className=\"float-right text-muted\">\n                  Balance: {this.state.web3.utils.fromWei(this.state.daiTokenBalance, 'Ether')}\n                </span>\n              </div>\n              <div className=\"input-group mb-4\">\n                <input\n                  type=\"text\"\n                  ref={(input) => {this.input = input}}\n                  className=\"form-control form-control-lg\"\n                  placeholder=\"0\"\n                  required />\n                <div className=\"input-group-append\">\n                  <div className=\"input-group-text\">\n                    <img src=\"\" height='32' alt=\"\"/>\n                    &nbsp;&nbsp;&nbsp; mDAI\n                  </div>\n                </div>\n              </div>\n              <button type=\"submit\" className=\"btn btn-primary btn-block btn-lg\">STAKE!</button>\n            </form>\n            <button\n              type=\"submit\"\n              onClick={(event) => {\n                event.preventDefault()\n                this.unstakeTokens()\n              }}\n              className=\"btn btn-link btn-block btn-sm\">\n                UN-STAKE...\n              </button>\n         Click the Issue Tokens to see rewards for staking\n              <button\n              type=\"submit\"\n              onClick={(event) => {\n                event.preventDefault()\n                this.issueTokens()\n              }} className=\"btn btn-link\"\n              >Issue Tokens</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}